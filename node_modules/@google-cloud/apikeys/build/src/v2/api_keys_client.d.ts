/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Manages the API keys associated with projects.
 * @class
 * @memberof v2
 */
export declare class ApiKeysClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    apiKeysStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ApiKeysClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ApiKeysClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets the metadata for an API key. The key string of the API key
     * isn't included in the response.
     *
     * NOTE: Key is a global resource; hence the only supported value for
     * location is `global`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the API key to get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.api.apikeys.v2.Key|Key}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.get_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_GetKey_async
     */
    getKey(request?: protos.google.api.apikeys.v2.IGetKeyRequest, options?: CallOptions): Promise<[
        protos.google.api.apikeys.v2.IKey,
        protos.google.api.apikeys.v2.IGetKeyRequest | undefined,
        {} | undefined
    ]>;
    getKey(request: protos.google.api.apikeys.v2.IGetKeyRequest, options: CallOptions, callback: Callback<protos.google.api.apikeys.v2.IKey, protos.google.api.apikeys.v2.IGetKeyRequest | null | undefined, {} | null | undefined>): void;
    getKey(request: protos.google.api.apikeys.v2.IGetKeyRequest, callback: Callback<protos.google.api.apikeys.v2.IKey, protos.google.api.apikeys.v2.IGetKeyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Get the key string for an API key.
     *
     * NOTE: Key is a global resource; hence the only supported value for
     * location is `global`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the API key to be retrieved.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.api.apikeys.v2.GetKeyStringResponse|GetKeyStringResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.get_key_string.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_GetKeyString_async
     */
    getKeyString(request?: protos.google.api.apikeys.v2.IGetKeyStringRequest, options?: CallOptions): Promise<[
        protos.google.api.apikeys.v2.IGetKeyStringResponse,
        protos.google.api.apikeys.v2.IGetKeyStringRequest | undefined,
        {} | undefined
    ]>;
    getKeyString(request: protos.google.api.apikeys.v2.IGetKeyStringRequest, options: CallOptions, callback: Callback<protos.google.api.apikeys.v2.IGetKeyStringResponse, protos.google.api.apikeys.v2.IGetKeyStringRequest | null | undefined, {} | null | undefined>): void;
    getKeyString(request: protos.google.api.apikeys.v2.IGetKeyStringRequest, callback: Callback<protos.google.api.apikeys.v2.IGetKeyStringResponse, protos.google.api.apikeys.v2.IGetKeyStringRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Find the parent project and resource name of the API
     * key that matches the key string in the request. If the API key has been
     * purged, resource name will not be set.
     * The service account must have the `apikeys.keys.lookup` permission
     * on the parent project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.keyString
     *   Required. Finds the project that owns the key string value.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.api.apikeys.v2.LookupKeyResponse|LookupKeyResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.lookup_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_LookupKey_async
     */
    lookupKey(request?: protos.google.api.apikeys.v2.ILookupKeyRequest, options?: CallOptions): Promise<[
        protos.google.api.apikeys.v2.ILookupKeyResponse,
        protos.google.api.apikeys.v2.ILookupKeyRequest | undefined,
        {} | undefined
    ]>;
    lookupKey(request: protos.google.api.apikeys.v2.ILookupKeyRequest, options: CallOptions, callback: Callback<protos.google.api.apikeys.v2.ILookupKeyResponse, protos.google.api.apikeys.v2.ILookupKeyRequest | null | undefined, {} | null | undefined>): void;
    lookupKey(request: protos.google.api.apikeys.v2.ILookupKeyRequest, callback: Callback<protos.google.api.apikeys.v2.ILookupKeyResponse, protos.google.api.apikeys.v2.ILookupKeyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new API key.
     *
     * NOTE: Key is a global resource; hence the only supported value for
     * location is `global`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project in which the API key is created.
     * @param {google.api.apikeys.v2.Key} request.key
     *   Required. The API key fields to set at creation time.
     *   You can configure only the `display_name`, `restrictions`, and
     *   `annotations` fields.
     * @param {string} request.keyId
     *   User specified key id (optional). If specified, it will become the final
     *   component of the key resource name.
     *
     *   The id must be unique within the project, must conform with RFC-1034,
     *   is restricted to lower-cased letters, and has a maximum length of 63
     *   characters. In another word, the id must match the regular
     *   expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
     *
     *   The id must NOT be a UUID-like string.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.create_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_CreateKey_async
     */
    createKey(request?: protos.google.api.apikeys.v2.ICreateKeyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createKey(request: protos.google.api.apikeys.v2.ICreateKeyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createKey(request: protos.google.api.apikeys.v2.ICreateKeyRequest, callback: Callback<LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createKey()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.create_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_CreateKey_async
     */
    checkCreateKeyProgress(name: string): Promise<LROperation<protos.google.api.apikeys.v2.Key, protos.google.protobuf.Empty>>;
    /**
     * Patches the modifiable fields of an API key.
     * The key string of the API key isn't included in the response.
     *
     * NOTE: Key is a global resource; hence the only supported value for
     * location is `global`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.api.apikeys.v2.Key} request.key
     *   Required. Set the `name` field to the resource name of the API key to be
     *   updated. You can update only the `display_name`, `restrictions`, and
     *   `annotations` fields.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   The field mask specifies which fields to be updated as part of this
     *   request. All other fields are ignored.
     *   Mutable fields are: `display_name`, `restrictions`, and `annotations`.
     *   If an update mask is not provided, the service treats it as an implied mask
     *   equivalent to all allowed fields that are set on the wire. If the field
     *   mask has a special value "*", the service treats it equivalent to replace
     *   all allowed mutable fields.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.update_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_UpdateKey_async
     */
    updateKey(request?: protos.google.api.apikeys.v2.IUpdateKeyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateKey(request: protos.google.api.apikeys.v2.IUpdateKeyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateKey(request: protos.google.api.apikeys.v2.IUpdateKeyRequest, callback: Callback<LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateKey()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.update_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_UpdateKey_async
     */
    checkUpdateKeyProgress(name: string): Promise<LROperation<protos.google.api.apikeys.v2.Key, protos.google.protobuf.Empty>>;
    /**
     * Deletes an API key. Deleted key can be retrieved within 30 days of
     * deletion. Afterward, key will be purged from the project.
     *
     * NOTE: Key is a global resource; hence the only supported value for
     * location is `global`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the API key to be deleted.
     * @param {string} [request.etag]
     *   Optional. The etag known to the client for the expected state of the key.
     *   This is to be used for optimistic concurrency.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.delete_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_DeleteKey_async
     */
    deleteKey(request?: protos.google.api.apikeys.v2.IDeleteKeyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteKey(request: protos.google.api.apikeys.v2.IDeleteKeyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteKey(request: protos.google.api.apikeys.v2.IDeleteKeyRequest, callback: Callback<LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteKey()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.delete_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_DeleteKey_async
     */
    checkDeleteKeyProgress(name: string): Promise<LROperation<protos.google.api.apikeys.v2.Key, protos.google.protobuf.Empty>>;
    /**
     * Undeletes an API key which was deleted within 30 days.
     *
     * NOTE: Key is a global resource; hence the only supported value for
     * location is `global`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the API key to be undeleted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.undelete_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_UndeleteKey_async
     */
    undeleteKey(request?: protos.google.api.apikeys.v2.IUndeleteKeyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    undeleteKey(request: protos.google.api.apikeys.v2.IUndeleteKeyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    undeleteKey(request: protos.google.api.apikeys.v2.IUndeleteKeyRequest, callback: Callback<LROperation<protos.google.api.apikeys.v2.IKey, protos.google.protobuf.IEmpty>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `undeleteKey()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.undelete_key.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_UndeleteKey_async
     */
    checkUndeleteKeyProgress(name: string): Promise<LROperation<protos.google.api.apikeys.v2.Key, protos.google.protobuf.Empty>>;
    /**
     * Lists the API keys owned by a project. The key string of the API key
     * isn't included in the response.
     *
     * NOTE: Key is a global resource; hence the only supported value for
     * location is `global`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Lists all API keys associated with this project.
     * @param {number} [request.pageSize]
     *   Optional. Specifies the maximum number of results to be returned at a time.
     * @param {string} [request.pageToken]
     *   Optional. Requests a specific page of results.
     * @param {boolean} [request.showDeleted]
     *   Optional. Indicate that keys deleted in the past 30 days should also be
     *   returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.api.apikeys.v2.Key|Key}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listKeysAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listKeys(request?: protos.google.api.apikeys.v2.IListKeysRequest, options?: CallOptions): Promise<[
        protos.google.api.apikeys.v2.IKey[],
        protos.google.api.apikeys.v2.IListKeysRequest | null,
        protos.google.api.apikeys.v2.IListKeysResponse
    ]>;
    listKeys(request: protos.google.api.apikeys.v2.IListKeysRequest, options: CallOptions, callback: PaginationCallback<protos.google.api.apikeys.v2.IListKeysRequest, protos.google.api.apikeys.v2.IListKeysResponse | null | undefined, protos.google.api.apikeys.v2.IKey>): void;
    listKeys(request: protos.google.api.apikeys.v2.IListKeysRequest, callback: PaginationCallback<protos.google.api.apikeys.v2.IListKeysRequest, protos.google.api.apikeys.v2.IListKeysResponse | null | undefined, protos.google.api.apikeys.v2.IKey>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Lists all API keys associated with this project.
     * @param {number} [request.pageSize]
     *   Optional. Specifies the maximum number of results to be returned at a time.
     * @param {string} [request.pageToken]
     *   Optional. Requests a specific page of results.
     * @param {boolean} [request.showDeleted]
     *   Optional. Indicate that keys deleted in the past 30 days should also be
     *   returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.api.apikeys.v2.Key|Key} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listKeysAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listKeysStream(request?: protos.google.api.apikeys.v2.IListKeysRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listKeys`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Lists all API keys associated with this project.
     * @param {number} [request.pageSize]
     *   Optional. Specifies the maximum number of results to be returned at a time.
     * @param {string} [request.pageToken]
     *   Optional. Requests a specific page of results.
     * @param {boolean} [request.showDeleted]
     *   Optional. Indicate that keys deleted in the past 30 days should also be
     *   returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.api.apikeys.v2.Key|Key}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/api_keys.list_keys.js</caption>
     * region_tag:apikeys_v2_generated_ApiKeys_ListKeys_async
     */
    listKeysAsync(request?: protos.google.api.apikeys.v2.IListKeysRequest, options?: CallOptions): AsyncIterable<protos.google.api.apikeys.v2.IKey>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified key resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} key
     * @returns {string} Resource name string.
     */
    keyPath(project: string, location: string, key: string): string;
    /**
     * Parse the project from Key resource.
     *
     * @param {string} keyName
     *   A fully-qualified path representing Key resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromKeyName(keyName: string): string | number;
    /**
     * Parse the location from Key resource.
     *
     * @param {string} keyName
     *   A fully-qualified path representing Key resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromKeyName(keyName: string): string | number;
    /**
     * Parse the key from Key resource.
     *
     * @param {string} keyName
     *   A fully-qualified path representing Key resource.
     * @returns {string} A string representing the key.
     */
    matchKeyFromKeyName(keyName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
